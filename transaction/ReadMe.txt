一. 事务基本原理
       事务是一系列的动作，一旦其中有一个动作出现错误，必须全部回滚，将事务中对数据库的所有已完成的操作全部撤消，
   滚回到事务开始的状态，避免出现由于数据不一致而导致的接下来一系列的错误，从而确保数据的完整性和一致性
二. 事务特征(ACID)
   1. 原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。
   2. 一致性（Consistency）：事务在完成时，必须是所有的数据都保持一致状态。
   3. 隔离性（Isolation）：并发事务执行之间无影响，在一个事务内部的操作对其他事务是不产生影响，这需要事务隔离级别来指定隔离性。
   4. 持久性（Durability）：一旦事务完成，数据库的改变必须是持久化的。

三. 在企业级应用中，多用户访问数据库是常见的场景，这就是所谓的事务的并发。事务并发所可能存在的问题
   1.脏读：一个事务读到另一个事务未提交的更新数据。
   2.不可重复读：一个事务两次读同一行数据，可是这两次读到的数据不一样。
   3.幻读：一个事务执行两次查询，但第二次查询比第一次查询多出了一些数据行。
   4.丢失更新：撤消一个事务时，把其它事务已提交的更新的数据覆盖了。

四. java.sql.Connection定义的隔离级别
    // JDBC 驱动不支持事务
    int TRANSACTION_NONE         = 0;

    // 允许脏读、不可重复读和幻读
    int TRANSACTION_READ_UNCOMMITTED = 1;

    // 禁止脏读，但允许不可重复读和幻读
    int TRANSACTION_READ_COMMITTED   = 2;

    // 禁止脏读和不可重复读，允许幻读
    int TRANSACTION_REPEATABLE_READ  = 4;

    // 禁止脏读、不可重复读和幻读
    int TRANSACTION_SERIALIZABLE     = 8;

    注：隔离级别越高，意味着数据库事务并发执行性能越差，能处理的操作就越少。可以通过conn.setTransactionLevel去设置需要的隔离级别。
       JDBC规范虽然定义了事务的以上支持行为，但是各个JDBC驱动，数据库厂商对事务的支持程度可能各不相同。出于性能的考虑一般设置为
       TRANSACTION_READ_COMMITTED

五. Spring事务管理
    Spring并不直接管理事务，而提供了多种事务管理器。将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。

附：
    http://blog.csdn.net/donggua3694857/article/details/69858827
